;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit aw_decode : 
  module aw_channel_out_reg_slice : 
    input clock : Clock
    input reset : Reset
    output io : {dout : {flip ready : UInt<1>, valid : UInt<1>, bits : {aw : UInt<80>}}, flip din : {flip ready : UInt<1>, valid : UInt<1>, bits : {aw : UInt<80>}}}
    
    wire _data_WIRE : {aw : UInt<80>} @[DoCE.scala 14:34]
    _data_WIRE.aw <= UInt<80>("h00") @[DoCE.scala 14:34]
    reg data : {aw : UInt<80>}, clock with : (reset => (reset, _data_WIRE)) @[DoCE.scala 14:21]
    reg valid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[DoCE.scala 15:22]
    reg ready : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[DoCE.scala 16:22]
    wire _data2_WIRE : {aw : UInt<80>} @[DoCE.scala 17:35]
    _data2_WIRE.aw <= UInt<80>("h00") @[DoCE.scala 17:35]
    reg data2 : {aw : UInt<80>}, clock with : (reset => (reset, _data2_WIRE)) @[DoCE.scala 17:22]
    reg valid2 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[DoCE.scala 18:23]
    node _T = eq(valid, UInt<1>("h00")) @[DoCE.scala 20:8]
    node _T_1 = or(_T, io.dout.ready) @[DoCE.scala 20:15]
    when _T_1 : @[DoCE.scala 20:31]
      when valid2 : @[DoCE.scala 22:17]
        data.aw <= data2.aw @[DoCE.scala 23:12]
        valid <= valid2 @[DoCE.scala 24:13]
        skip @[DoCE.scala 22:17]
      else : @[DoCE.scala 25:29]
        when io.din.ready : @[DoCE.scala 25:29]
          data.aw <= io.din.bits.aw @[DoCE.scala 27:12]
          valid <= io.din.valid @[DoCE.scala 28:13]
          skip @[DoCE.scala 25:29]
        else : @[DoCE.scala 29:16]
          wire _data_WIRE_1 : {aw : UInt<80>} @[DoCE.scala 31:27]
          _data_WIRE_1.aw <= UInt<80>("h00") @[DoCE.scala 31:27]
          data.aw <= _data_WIRE_1.aw @[DoCE.scala 31:12]
          valid <= UInt<1>("h00") @[DoCE.scala 32:13]
          skip @[DoCE.scala 29:16]
      skip @[DoCE.scala 20:31]
    ready <= io.dout.ready @[DoCE.scala 35:9]
    node _T_2 = eq(io.dout.ready, UInt<1>("h00")) @[DoCE.scala 38:17]
    node _T_3 = and(valid, _T_2) @[DoCE.scala 38:14]
    node _T_4 = eq(valid2, UInt<1>("h00")) @[DoCE.scala 38:35]
    node _T_5 = and(_T_3, _T_4) @[DoCE.scala 38:32]
    when _T_5 : @[DoCE.scala 38:44]
      data2.aw <= io.din.bits.aw @[DoCE.scala 39:11]
      valid2 <= io.din.valid @[DoCE.scala 40:12]
      skip @[DoCE.scala 38:44]
    else : @[DoCE.scala 41:28]
      when io.dout.ready : @[DoCE.scala 41:28]
        wire _data2_WIRE_1 : {aw : UInt<80>} @[DoCE.scala 43:26]
        _data2_WIRE_1.aw <= UInt<80>("h00") @[DoCE.scala 43:26]
        data2.aw <= _data2_WIRE_1.aw @[DoCE.scala 43:11]
        valid2 <= UInt<1>("h00") @[DoCE.scala 44:12]
        skip @[DoCE.scala 41:28]
    node _io_din_ready_T = eq(valid, UInt<1>("h00")) @[DoCE.scala 47:27]
    node _io_din_ready_T_1 = or(ready, _io_din_ready_T) @[DoCE.scala 47:25]
    node _io_din_ready_T_2 = eq(valid2, UInt<1>("h00")) @[DoCE.scala 47:36]
    node _io_din_ready_T_3 = or(_io_din_ready_T_1, _io_din_ready_T_2) @[DoCE.scala 47:34]
    io.din.ready <= _io_din_ready_T_3 @[DoCE.scala 47:16]
    io.dout.valid <= valid @[DoCE.scala 48:17]
    io.dout.bits.aw <= data.aw @[DoCE.scala 49:16]
    
  module w_channel_out_reg_slice : 
    input clock : Clock
    input reset : Reset
    output io : {dout : {flip ready : UInt<1>, valid : UInt<1>, bits : {w : UInt<576>, last : UInt<1>}}, flip din : {flip ready : UInt<1>, valid : UInt<1>, bits : {w : UInt<576>, last : UInt<1>}}}
    
    wire _data_WIRE : {w : UInt<576>, last : UInt<1>} @[DoCE.scala 14:34]
    _data_WIRE.last <= UInt<1>("h00") @[DoCE.scala 14:34]
    _data_WIRE.w <= UInt<576>("h00") @[DoCE.scala 14:34]
    reg data : {w : UInt<576>, last : UInt<1>}, clock with : (reset => (reset, _data_WIRE)) @[DoCE.scala 14:21]
    reg valid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[DoCE.scala 15:22]
    reg ready : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[DoCE.scala 16:22]
    wire _data2_WIRE : {w : UInt<576>, last : UInt<1>} @[DoCE.scala 17:35]
    _data2_WIRE.last <= UInt<1>("h00") @[DoCE.scala 17:35]
    _data2_WIRE.w <= UInt<576>("h00") @[DoCE.scala 17:35]
    reg data2 : {w : UInt<576>, last : UInt<1>}, clock with : (reset => (reset, _data2_WIRE)) @[DoCE.scala 17:22]
    reg valid2 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[DoCE.scala 18:23]
    node _T = eq(valid, UInt<1>("h00")) @[DoCE.scala 20:8]
    node _T_1 = or(_T, io.dout.ready) @[DoCE.scala 20:15]
    when _T_1 : @[DoCE.scala 20:31]
      when valid2 : @[DoCE.scala 22:17]
        data.last <= data2.last @[DoCE.scala 23:12]
        data.w <= data2.w @[DoCE.scala 23:12]
        valid <= valid2 @[DoCE.scala 24:13]
        skip @[DoCE.scala 22:17]
      else : @[DoCE.scala 25:29]
        when io.din.ready : @[DoCE.scala 25:29]
          data.last <= io.din.bits.last @[DoCE.scala 27:12]
          data.w <= io.din.bits.w @[DoCE.scala 27:12]
          valid <= io.din.valid @[DoCE.scala 28:13]
          skip @[DoCE.scala 25:29]
        else : @[DoCE.scala 29:16]
          wire _data_WIRE_1 : {w : UInt<576>, last : UInt<1>} @[DoCE.scala 31:27]
          _data_WIRE_1.last <= UInt<1>("h00") @[DoCE.scala 31:27]
          _data_WIRE_1.w <= UInt<576>("h00") @[DoCE.scala 31:27]
          data.last <= _data_WIRE_1.last @[DoCE.scala 31:12]
          data.w <= _data_WIRE_1.w @[DoCE.scala 31:12]
          valid <= UInt<1>("h00") @[DoCE.scala 32:13]
          skip @[DoCE.scala 29:16]
      skip @[DoCE.scala 20:31]
    ready <= io.dout.ready @[DoCE.scala 35:9]
    node _T_2 = eq(io.dout.ready, UInt<1>("h00")) @[DoCE.scala 38:17]
    node _T_3 = and(valid, _T_2) @[DoCE.scala 38:14]
    node _T_4 = eq(valid2, UInt<1>("h00")) @[DoCE.scala 38:35]
    node _T_5 = and(_T_3, _T_4) @[DoCE.scala 38:32]
    when _T_5 : @[DoCE.scala 38:44]
      data2.last <= io.din.bits.last @[DoCE.scala 39:11]
      data2.w <= io.din.bits.w @[DoCE.scala 39:11]
      valid2 <= io.din.valid @[DoCE.scala 40:12]
      skip @[DoCE.scala 38:44]
    else : @[DoCE.scala 41:28]
      when io.dout.ready : @[DoCE.scala 41:28]
        wire _data2_WIRE_1 : {w : UInt<576>, last : UInt<1>} @[DoCE.scala 43:26]
        _data2_WIRE_1.last <= UInt<1>("h00") @[DoCE.scala 43:26]
        _data2_WIRE_1.w <= UInt<576>("h00") @[DoCE.scala 43:26]
        data2.last <= _data2_WIRE_1.last @[DoCE.scala 43:11]
        data2.w <= _data2_WIRE_1.w @[DoCE.scala 43:11]
        valid2 <= UInt<1>("h00") @[DoCE.scala 44:12]
        skip @[DoCE.scala 41:28]
    node _io_din_ready_T = eq(valid, UInt<1>("h00")) @[DoCE.scala 47:27]
    node _io_din_ready_T_1 = or(ready, _io_din_ready_T) @[DoCE.scala 47:25]
    node _io_din_ready_T_2 = eq(valid2, UInt<1>("h00")) @[DoCE.scala 47:36]
    node _io_din_ready_T_3 = or(_io_din_ready_T_1, _io_din_ready_T_2) @[DoCE.scala 47:34]
    io.din.ready <= _io_din_ready_T_3 @[DoCE.scala 47:16]
    io.dout.valid <= valid @[DoCE.scala 48:17]
    io.dout.bits.last <= data.last @[DoCE.scala 49:16]
    io.dout.bits.w <= data.w @[DoCE.scala 49:16]
    
  module aw_decode : 
    input clock : Clock
    input reset : UInt<1>
    output io : {aw_channel : {flip ready : UInt<1>, valid : UInt<1>, bits : {aw : UInt<80>}}, w_channel : {flip ready : UInt<1>, valid : UInt<1>, bits : {w : UInt<576>, last : UInt<1>}}, flip din_channel : {flip ready : UInt<1>, valid : UInt<1>, bits : {din : UInt<512>, last : UInt<1>}}, flip phy_base_0 : UInt<49>, flip phy_base_1 : UInt<49>}
    
    reg bit_recv : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[DoCE.scala 184:25]
    reg bit_sent : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[DoCE.scala 185:25]
    inst aw_channel_out of aw_channel_out_reg_slice @[DoCE.scala 186:30]
    aw_channel_out.clock <= clock
    aw_channel_out.reset <= reset
    inst w_channel_out of w_channel_out_reg_slice @[DoCE.scala 189:29]
    w_channel_out.clock <= clock
    w_channel_out.reset <= reset
    wire _mid_WIRE : {w : UInt<512>, last : UInt<1>} @[DoCE.scala 193:33]
    _mid_WIRE.last <= UInt<1>("h00") @[DoCE.scala 193:33]
    _mid_WIRE.w <= UInt<512>("h00") @[DoCE.scala 193:33]
    reg mid : {w : UInt<512>, last : UInt<1>}, clock with : (reset => (reset, _mid_WIRE)) @[DoCE.scala 193:20]
    node _T = and(io.din_channel.ready, io.din_channel.valid) @[DoCE.scala 198:29]
    when _T : @[DoCE.scala 198:53]
      when io.din_channel.bits.last : @[DoCE.scala 199:35]
        bit_recv <= UInt<1>("h00") @[DoCE.scala 200:16]
        skip @[DoCE.scala 199:35]
      else : @[DoCE.scala 201:16]
        node _bit_recv_T = add(bit_recv, UInt<10>("h0200")) @[DoCE.scala 202:28]
        node _bit_recv_T_1 = tail(_bit_recv_T, 1) @[DoCE.scala 202:28]
        bit_recv <= _bit_recv_T_1 @[DoCE.scala 202:16]
        skip @[DoCE.scala 201:16]
      skip @[DoCE.scala 198:53]
    node _T_1 = and(w_channel_out.io.din.valid, w_channel_out.io.din.ready) @[DoCE.scala 206:35]
    when _T_1 : @[DoCE.scala 206:65]
      when w_channel_out.io.din.bits.last : @[DoCE.scala 207:41]
        bit_sent <= UInt<1>("h00") @[DoCE.scala 208:16]
        skip @[DoCE.scala 207:41]
      else : @[DoCE.scala 209:16]
        node _bit_sent_T = add(bit_sent, UInt<10>("h0240")) @[DoCE.scala 210:28]
        node _bit_sent_T_1 = tail(_bit_sent_T, 1) @[DoCE.scala 210:28]
        bit_sent <= _bit_sent_T_1 @[DoCE.scala 210:16]
        skip @[DoCE.scala 209:16]
      skip @[DoCE.scala 206:65]
    else : @[DoCE.scala 212:73]
      node _T_2 = and(aw_channel_out.io.din.valid, aw_channel_out.io.din.ready) @[DoCE.scala 212:42]
      when _T_2 : @[DoCE.scala 212:73]
        node _bit_sent_T_2 = add(bit_sent, UInt<8>("h080")) @[DoCE.scala 213:26]
        node _bit_sent_T_3 = tail(_bit_sent_T_2, 1) @[DoCE.scala 213:26]
        bit_sent <= _bit_sent_T_3 @[DoCE.scala 213:14]
        skip @[DoCE.scala 212:73]
    node _T_3 = and(io.din_channel.ready, io.din_channel.valid) @[DoCE.scala 216:29]
    when _T_3 : @[DoCE.scala 216:53]
      mid.w <= io.din_channel.bits.din @[DoCE.scala 217:11]
      mid.last <= io.din_channel.bits.last @[DoCE.scala 218:14]
      skip @[DoCE.scala 216:53]
    io.aw_channel.bits.aw <= aw_channel_out.io.dout.bits.aw @[DoCE.scala 221:17]
    io.aw_channel.valid <= aw_channel_out.io.dout.valid @[DoCE.scala 221:17]
    aw_channel_out.io.dout.ready <= io.aw_channel.ready @[DoCE.scala 221:17]
    io.w_channel.bits.last <= w_channel_out.io.dout.bits.last @[DoCE.scala 222:16]
    io.w_channel.bits.w <= w_channel_out.io.dout.bits.w @[DoCE.scala 222:16]
    io.w_channel.valid <= w_channel_out.io.dout.valid @[DoCE.scala 222:16]
    w_channel_out.io.dout.ready <= io.w_channel.ready @[DoCE.scala 222:16]
    io.din_channel.ready <= UInt<1>("h00") @[DoCE.scala 224:24]
    w_channel_out.io.din.valid <= UInt<1>("h00") @[DoCE.scala 225:30]
    w_channel_out.io.din.bits.w <= UInt<1>("h00") @[DoCE.scala 226:31]
    w_channel_out.io.din.bits.last <= UInt<1>("h00") @[DoCE.scala 227:34]
    aw_channel_out.io.din.valid <= UInt<1>("h00") @[DoCE.scala 228:31]
    node _left_T = sub(bit_recv, bit_sent) @[DoCE.scala 229:23]
    node left = tail(_left_T, 1) @[DoCE.scala 229:23]
    node _T_4 = eq(left, UInt<1>("h00")) @[DoCE.scala 232:15]
    when _T_4 : @[DoCE.scala 232:23]
      node _T_5 = eq(bit_sent, UInt<1>("h00")) @[DoCE.scala 234:23]
      node _T_6 = and(_T_5, io.din_channel.valid) @[DoCE.scala 234:31]
      when _T_6 : @[DoCE.scala 234:55]
        aw_channel_out.io.din.valid <= UInt<1>("h01") @[DoCE.scala 235:39]
        io.din_channel.ready <= aw_channel_out.io.din.ready @[DoCE.scala 236:32]
        skip @[DoCE.scala 234:55]
      else : @[DoCE.scala 237:41]
        when io.din_channel.valid : @[DoCE.scala 237:41]
          io.din_channel.ready <= UInt<1>("h01") @[DoCE.scala 238:32]
          skip @[DoCE.scala 237:41]
      skip @[DoCE.scala 232:23]
    node _T_7 = eq(left, UInt<7>("h040")) @[DoCE.scala 232:15]
    when _T_7 : @[DoCE.scala 232:23]
      when io.din_channel.valid : @[DoCE.scala 241:35]
        io.din_channel.ready <= w_channel_out.io.din.ready @[DoCE.scala 242:32]
        w_channel_out.io.din.valid <= UInt<1>("h01") @[DoCE.scala 243:38]
        node w_channel_out_io_din_bits_w_hi = bits(io.din_channel.bits.din, 511, 0) @[DoCE.scala 244:69]
        node w_channel_out_io_din_bits_w_lo = bits(mid.w, 511, 448) @[DoCE.scala 244:104]
        node _w_channel_out_io_din_bits_w_T = cat(w_channel_out_io_din_bits_w_hi, w_channel_out_io_din_bits_w_lo) @[Cat.scala 30:58]
        w_channel_out.io.din.bits.w <= _w_channel_out_io_din_bits_w_T @[DoCE.scala 244:39]
        w_channel_out.io.din.bits.last <= io.din_channel.bits.last @[DoCE.scala 245:42]
        skip @[DoCE.scala 241:35]
      skip @[DoCE.scala 232:23]
    node _T_8 = eq(left, UInt<8>("h080")) @[DoCE.scala 232:15]
    when _T_8 : @[DoCE.scala 232:23]
      when io.din_channel.valid : @[DoCE.scala 241:35]
        io.din_channel.ready <= w_channel_out.io.din.ready @[DoCE.scala 242:32]
        w_channel_out.io.din.valid <= UInt<1>("h01") @[DoCE.scala 243:38]
        node w_channel_out_io_din_bits_w_hi_1 = bits(io.din_channel.bits.din, 447, 0) @[DoCE.scala 244:69]
        node w_channel_out_io_din_bits_w_lo_1 = bits(mid.w, 511, 384) @[DoCE.scala 244:104]
        node _w_channel_out_io_din_bits_w_T_1 = cat(w_channel_out_io_din_bits_w_hi_1, w_channel_out_io_din_bits_w_lo_1) @[Cat.scala 30:58]
        w_channel_out.io.din.bits.w <= _w_channel_out_io_din_bits_w_T_1 @[DoCE.scala 244:39]
        w_channel_out.io.din.bits.last <= io.din_channel.bits.last @[DoCE.scala 245:42]
        skip @[DoCE.scala 241:35]
      skip @[DoCE.scala 232:23]
    node _T_9 = eq(left, UInt<8>("h0c0")) @[DoCE.scala 232:15]
    when _T_9 : @[DoCE.scala 232:23]
      when io.din_channel.valid : @[DoCE.scala 241:35]
        io.din_channel.ready <= w_channel_out.io.din.ready @[DoCE.scala 242:32]
        w_channel_out.io.din.valid <= UInt<1>("h01") @[DoCE.scala 243:38]
        node w_channel_out_io_din_bits_w_hi_2 = bits(io.din_channel.bits.din, 383, 0) @[DoCE.scala 244:69]
        node w_channel_out_io_din_bits_w_lo_2 = bits(mid.w, 511, 320) @[DoCE.scala 244:104]
        node _w_channel_out_io_din_bits_w_T_2 = cat(w_channel_out_io_din_bits_w_hi_2, w_channel_out_io_din_bits_w_lo_2) @[Cat.scala 30:58]
        w_channel_out.io.din.bits.w <= _w_channel_out_io_din_bits_w_T_2 @[DoCE.scala 244:39]
        w_channel_out.io.din.bits.last <= io.din_channel.bits.last @[DoCE.scala 245:42]
        skip @[DoCE.scala 241:35]
      skip @[DoCE.scala 232:23]
    node _T_10 = eq(left, UInt<9>("h0100")) @[DoCE.scala 232:15]
    when _T_10 : @[DoCE.scala 232:23]
      when io.din_channel.valid : @[DoCE.scala 241:35]
        io.din_channel.ready <= w_channel_out.io.din.ready @[DoCE.scala 242:32]
        w_channel_out.io.din.valid <= UInt<1>("h01") @[DoCE.scala 243:38]
        node w_channel_out_io_din_bits_w_hi_3 = bits(io.din_channel.bits.din, 319, 0) @[DoCE.scala 244:69]
        node w_channel_out_io_din_bits_w_lo_3 = bits(mid.w, 511, 256) @[DoCE.scala 244:104]
        node _w_channel_out_io_din_bits_w_T_3 = cat(w_channel_out_io_din_bits_w_hi_3, w_channel_out_io_din_bits_w_lo_3) @[Cat.scala 30:58]
        w_channel_out.io.din.bits.w <= _w_channel_out_io_din_bits_w_T_3 @[DoCE.scala 244:39]
        w_channel_out.io.din.bits.last <= io.din_channel.bits.last @[DoCE.scala 245:42]
        skip @[DoCE.scala 241:35]
      skip @[DoCE.scala 232:23]
    node _T_11 = eq(left, UInt<9>("h0140")) @[DoCE.scala 232:15]
    when _T_11 : @[DoCE.scala 232:23]
      when io.din_channel.valid : @[DoCE.scala 241:35]
        io.din_channel.ready <= w_channel_out.io.din.ready @[DoCE.scala 242:32]
        w_channel_out.io.din.valid <= UInt<1>("h01") @[DoCE.scala 243:38]
        node w_channel_out_io_din_bits_w_hi_4 = bits(io.din_channel.bits.din, 255, 0) @[DoCE.scala 244:69]
        node w_channel_out_io_din_bits_w_lo_4 = bits(mid.w, 511, 192) @[DoCE.scala 244:104]
        node _w_channel_out_io_din_bits_w_T_4 = cat(w_channel_out_io_din_bits_w_hi_4, w_channel_out_io_din_bits_w_lo_4) @[Cat.scala 30:58]
        w_channel_out.io.din.bits.w <= _w_channel_out_io_din_bits_w_T_4 @[DoCE.scala 244:39]
        w_channel_out.io.din.bits.last <= io.din_channel.bits.last @[DoCE.scala 245:42]
        skip @[DoCE.scala 241:35]
      skip @[DoCE.scala 232:23]
    node _T_12 = eq(left, UInt<9>("h0180")) @[DoCE.scala 232:15]
    when _T_12 : @[DoCE.scala 232:23]
      when io.din_channel.valid : @[DoCE.scala 241:35]
        io.din_channel.ready <= w_channel_out.io.din.ready @[DoCE.scala 242:32]
        w_channel_out.io.din.valid <= UInt<1>("h01") @[DoCE.scala 243:38]
        node w_channel_out_io_din_bits_w_hi_5 = bits(io.din_channel.bits.din, 191, 0) @[DoCE.scala 244:69]
        node w_channel_out_io_din_bits_w_lo_5 = bits(mid.w, 511, 128) @[DoCE.scala 244:104]
        node _w_channel_out_io_din_bits_w_T_5 = cat(w_channel_out_io_din_bits_w_hi_5, w_channel_out_io_din_bits_w_lo_5) @[Cat.scala 30:58]
        w_channel_out.io.din.bits.w <= _w_channel_out_io_din_bits_w_T_5 @[DoCE.scala 244:39]
        w_channel_out.io.din.bits.last <= io.din_channel.bits.last @[DoCE.scala 245:42]
        skip @[DoCE.scala 241:35]
      skip @[DoCE.scala 232:23]
    node _T_13 = eq(left, UInt<9>("h01c0")) @[DoCE.scala 232:15]
    when _T_13 : @[DoCE.scala 232:23]
      when io.din_channel.valid : @[DoCE.scala 241:35]
        io.din_channel.ready <= w_channel_out.io.din.ready @[DoCE.scala 242:32]
        w_channel_out.io.din.valid <= UInt<1>("h01") @[DoCE.scala 243:38]
        node w_channel_out_io_din_bits_w_hi_6 = bits(io.din_channel.bits.din, 127, 0) @[DoCE.scala 244:69]
        node w_channel_out_io_din_bits_w_lo_6 = bits(mid.w, 511, 64) @[DoCE.scala 244:104]
        node _w_channel_out_io_din_bits_w_T_6 = cat(w_channel_out_io_din_bits_w_hi_6, w_channel_out_io_din_bits_w_lo_6) @[Cat.scala 30:58]
        w_channel_out.io.din.bits.w <= _w_channel_out_io_din_bits_w_T_6 @[DoCE.scala 244:39]
        w_channel_out.io.din.bits.last <= io.din_channel.bits.last @[DoCE.scala 245:42]
        skip @[DoCE.scala 241:35]
      skip @[DoCE.scala 232:23]
    node _T_14 = eq(left, UInt<10>("h0200")) @[DoCE.scala 232:15]
    when _T_14 : @[DoCE.scala 232:23]
      when io.din_channel.valid : @[DoCE.scala 241:35]
        io.din_channel.ready <= w_channel_out.io.din.ready @[DoCE.scala 242:32]
        w_channel_out.io.din.valid <= UInt<1>("h01") @[DoCE.scala 243:38]
        node w_channel_out_io_din_bits_w_hi_7 = bits(io.din_channel.bits.din, 63, 0) @[DoCE.scala 244:69]
        node w_channel_out_io_din_bits_w_lo_7 = bits(mid.w, 511, 0) @[DoCE.scala 244:104]
        node _w_channel_out_io_din_bits_w_T_7 = cat(w_channel_out_io_din_bits_w_hi_7, w_channel_out_io_din_bits_w_lo_7) @[Cat.scala 30:58]
        w_channel_out.io.din.bits.w <= _w_channel_out_io_din_bits_w_T_7 @[DoCE.scala 244:39]
        w_channel_out.io.din.bits.last <= io.din_channel.bits.last @[DoCE.scala 245:42]
        skip @[DoCE.scala 241:35]
      skip @[DoCE.scala 232:23]
    node aw_channel_out_io_din_bits_aw_hi = bits(io.din_channel.bits.din, 83, 8) @[DoCE.scala 251:63]
    node aw_channel_out_io_din_bits_aw_lo = bits(io.din_channel.bits.din, 3, 0) @[DoCE.scala 251:95]
    node _aw_channel_out_io_din_bits_aw_T = cat(aw_channel_out_io_din_bits_aw_hi, aw_channel_out_io_din_bits_aw_lo) @[Cat.scala 30:58]
    aw_channel_out.io.din.bits.aw <= _aw_channel_out_io_din_bits_aw_T @[DoCE.scala 251:33]
    node _T_15 = bits(io.din_channel.bits.din, 7, 4) @[DoCE.scala 252:31]
    node _T_16 = bits(io.phy_base_0, 47, 44) @[DoCE.scala 252:55]
    node _T_17 = eq(_T_15, _T_16) @[DoCE.scala 252:38]
    node _T_18 = bits(io.phy_base_0, 48, 48) @[DoCE.scala 252:80]
    node _T_19 = and(_T_17, _T_18) @[DoCE.scala 252:64]
    when _T_19 : @[DoCE.scala 252:85]
      node aw_channel_out_io_din_bits_aw_hi_1 = bits(io.din_channel.bits.din, 83, 8) @[DoCE.scala 253:65]
      node aw_channel_out_io_din_bits_aw_lo_1 = bits(io.din_channel.bits.din, 3, 0) @[DoCE.scala 253:97]
      node _aw_channel_out_io_din_bits_aw_T_1 = cat(aw_channel_out_io_din_bits_aw_hi_1, aw_channel_out_io_din_bits_aw_lo_1) @[Cat.scala 30:58]
      node aw_channel_out_io_din_bits_aw_hi_2 = bits(io.phy_base_0, 43, 0) @[DoCE.scala 254:24]
      node _aw_channel_out_io_din_bits_aw_T_2 = cat(aw_channel_out_io_din_bits_aw_hi_2, UInt<4>("h00")) @[Cat.scala 30:58]
      wire _aw_channel_out_io_din_bits_aw_WIRE : UInt<80> @[DoCE.scala 254:51]
      _aw_channel_out_io_din_bits_aw_WIRE <= _aw_channel_out_io_din_bits_aw_T_2 @[DoCE.scala 254:51]
      node _aw_channel_out_io_din_bits_aw_T_3 = or(_aw_channel_out_io_din_bits_aw_T_1, _aw_channel_out_io_din_bits_aw_WIRE) @[DoCE.scala 253:105]
      aw_channel_out.io.din.bits.aw <= _aw_channel_out_io_din_bits_aw_T_3 @[DoCE.scala 253:35]
      skip @[DoCE.scala 252:85]
    else : @[DoCE.scala 255:91]
      node _T_20 = bits(io.din_channel.bits.din, 7, 4) @[DoCE.scala 255:37]
      node _T_21 = bits(io.phy_base_1, 47, 44) @[DoCE.scala 255:61]
      node _T_22 = eq(_T_20, _T_21) @[DoCE.scala 255:44]
      node _T_23 = bits(io.phy_base_1, 48, 48) @[DoCE.scala 255:86]
      node _T_24 = and(_T_22, _T_23) @[DoCE.scala 255:70]
      when _T_24 : @[DoCE.scala 255:91]
        node aw_channel_out_io_din_bits_aw_hi_3 = bits(io.din_channel.bits.din, 83, 8) @[DoCE.scala 256:65]
        node aw_channel_out_io_din_bits_aw_lo_2 = bits(io.din_channel.bits.din, 3, 0) @[DoCE.scala 256:97]
        node _aw_channel_out_io_din_bits_aw_T_4 = cat(aw_channel_out_io_din_bits_aw_hi_3, aw_channel_out_io_din_bits_aw_lo_2) @[Cat.scala 30:58]
        node aw_channel_out_io_din_bits_aw_hi_4 = bits(io.phy_base_1, 43, 0) @[DoCE.scala 257:24]
        node _aw_channel_out_io_din_bits_aw_T_5 = cat(aw_channel_out_io_din_bits_aw_hi_4, UInt<4>("h00")) @[Cat.scala 30:58]
        wire _aw_channel_out_io_din_bits_aw_WIRE_1 : UInt<80> @[DoCE.scala 257:51]
        _aw_channel_out_io_din_bits_aw_WIRE_1 <= _aw_channel_out_io_din_bits_aw_T_5 @[DoCE.scala 257:51]
        node _aw_channel_out_io_din_bits_aw_T_6 = or(_aw_channel_out_io_din_bits_aw_T_4, _aw_channel_out_io_din_bits_aw_WIRE_1) @[DoCE.scala 256:105]
        aw_channel_out.io.din.bits.aw <= _aw_channel_out_io_din_bits_aw_T_6 @[DoCE.scala 256:35]
        skip @[DoCE.scala 255:91]
    
